
// This is an autogenerated file from Firebase Studio.

"use client";

import { useState, useEffect, useCallback } from "react";
import Header from "@/components/header";
import ProductList from "@/components/product-list";
import ShoppingCart from "@/components/shopping-cart";
import type { CartItem, Product } from "@/lib/types";
import { productRecommendation, type ProductRecommendationOutput } from "@/ai/flows/product-recommendation";
import AIRecommendations from "@/components/ai-recommendations";
import { toast } from "react-hot-toast";
import { CheckoutForm } from "@/components/checkout-form";
import { Button } from "@/components/ui/button";
import { useIsMobile } from "@/hooks/use-mobile";
import { Sheet, SheetContent } from "@/components/ui/sheet";
import { db } from "@/lib/firebase";
import { collection, query, onSnapshot, orderBy, limit, startAfter, getDocs, QueryDocumentSnapshot, DocumentData, where, Query } from "firebase/firestore";
import { Skeleton } from "@/components/ui/skeleton";
import { Carousel, CarouselContent, CarouselItem, CarouselNext, CarouselPrevious } from "@/components/ui/carousel";
import ProductCard from "@/components/product-card";
import { Flame, Loader2 } from "lucide-react";
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select";


const PRODUCTS_PER_PAGE = 8;
type SortOption = "name:asc" | "price:asc" | "price:desc" | "views:desc";


export default function StorePage() {
  const [products, setProducts] = useState<Product[]>([]);
  const [trendingProducts, setTrendingProducts] = useState<Product[]>([]);
  const [isLoadingProducts, setIsLoadingProducts] = useState(true);
  const [isLoadingMore, setIsLoadingMore] = useState(false);
  const [lastVisible, setLastVisible] = useState<QueryDocumentSnapshot<DocumentData> | null>(null);
  const [hasMore, setHasMore] = useState(true);

  const [cartItems, setCartItems] = useState<CartItem[]>([]);
  const [wishlist, setWishlist] = useState<Set<string>>(new Set());
  const [recommendations, setRecommendations] = useState<ProductRecommendationOutput["recommendations"]>([]);
  const [isLoadingRecommendations, setIsLoadingRecommendations] = useState(false);
  const [isCheckoutOpen, setIsCheckoutOpen] = useState(false);
  const [selectedCategory, setSelectedCategory] = useState("All");
  const [sortOption, setSortOption] = useState<SortOption>("name:asc");
  const [isCartOpen, setIsCartOpen] = useState(false);
  const isMobile = useIsMobile();


  const getProductsQuery = useCallback((isLoadMore = false) => {
    let q: Query<DocumentData>;
    const baseCollection = collection(db, "products");

    // Base query parts
    let queryParts: any[] = [];

    // Category filter
    if (selectedCategory !== "All") {
        queryParts.push(where("category", "==", selectedCategory));
    }
    
    // Sorting logic
    const [field, direction] = sortOption.split(":");
    queryParts.push(orderBy(field, direction as "asc" | "desc"));

    // Pagination
    if (isLoadMore && lastVisible) {
        queryParts.push(startAfter(lastVisible));
    }
    queryParts.push(limit(PRODUCTS_PER_PAGE));

    q = query(baseCollection, ...queryParts);
    return q;
  }, [selectedCategory, sortOption, lastVisible]);


  useEffect(() => {
    setIsLoadingProducts(true);

    const q = getProductsQuery();
    const unsubscribe = onSnapshot(q, (snapshot) => {
      const initialProducts = snapshot.docs.map(doc => ({ id: doc.id, ...doc.data() } as Product));
      setProducts(initialProducts);
      
      const lastVisibleDoc = snapshot.docs[snapshot.docs.length - 1];
      setLastVisible(lastVisibleDoc);
      setHasMore(snapshot.docs.length === PRODUCTS_PER_PAGE);
      setIsLoadingProducts(false);
    }, (error) => {
      console.error("Error fetching products: ", error);
      if (error.code === 'failed-precondition') {
          toast.error("You need to create a database index. Please check the Firestore setup guide.", { duration: 10000 });
      } else {
          toast.error("Failed to load products.");
      }
      setIsLoadingProducts(false);
    });

    return () => unsubscribe();
  }, [selectedCategory, sortOption, getProductsQuery]);
  

  useEffect(() => {
    // This effect handles fetching trending products and should not be dependent on sorting/filtering
    const trendingQuery = query(collection(db, "products"), orderBy("views", "desc"), limit(10));
    const unsubscribeTrending = onSnapshot(trendingQuery, (snapshot) => {
      const trendingData = snapshot.docs.map((doc) => ({
        id: doc.id,
        ...doc.data(),
      })) as Product[];
      setTrendingProducts(trendingData);
    });
    return () => unsubscribeTrending();
  }, []);

  const handleLoadMore = async () => {
    if (!lastVisible || !hasMore) {
      return;
    };
    setIsLoadingMore(true);

    try {
        const q = getProductsQuery(true);
        const documentSnapshots = await getDocs(q);
        const newProducts = documentSnapshots.docs.map(doc => ({ id: doc.id, ...doc.data() } as Product));
        setProducts(prev => [...prev, ...newProducts]);

        const lastVisibleDoc = documentSnapshots.docs[documentSnapshots.docs.length - 1];
        setLastVisible(lastVisibleDoc);

        if (documentSnapshots.docs.length < PRODUCTS_PER_PAGE) {
            setHasMore(false);
        }
    } catch(error) {
        console.error("Error fetching more products: ", error);
        toast.error("Failed to load more products.");
    } finally {
        setIsLoadingMore(false);
    }
  };


  useEffect(() => {
    const handleStorageChange = (e: StorageEvent) => {
        if (e.key === 'cart') {
            const updatedCart = localStorage.getItem("cart");
            if (updatedCart) {
                setCartItems(JSON.parse(updatedCart));
            }
        }
        if (e.key === 'wishlist') {
            const updatedWishlist = localStorage.getItem("wishlist");
            if(updatedWishlist) {
                setWishlist(new Set(JSON.parse(updatedWishlist)))
            }
        }
    };
    window.addEventListener('storage', handleStorageChange);

    // Load initial wishlist and cart from localStorage
    const storedWishlist = localStorage.getItem("wishlist");
    if (storedWishlist) {
      try {
        setWishlist(new Set(JSON.parse(storedWishlist)));
      } catch (e) {
        localStorage.removeItem("wishlist");
      }
    }
    const storedCart = localStorage.getItem("cart");
    if (storedCart) {
      try {
        setCartItems(JSON.parse(storedCart));
      } catch(e) {
        localStorage.removeItem("cart");
      }
    }

    return () => window.removeEventListener('storage', handleStorageChange);
  }, []);

  const triggerStorageUpdate = () => {
    window.dispatchEvent(new Event('storage'));
  };

  const handleAddToCart = useCallback((product: Product) => {
    let wasAdded = false;
    setCartItems((prevItems) => {
      let newItems: CartItem[];
      const existingItem = prevItems.find((item) => item.id === product.id);
      if (existingItem) {
        newItems = prevItems.map((item) =>
          item.id === product.id ? { ...item, quantity: item.quantity + 1 } : item
        );
      } else {
        newItems = [...prevItems, { ...product, quantity: 1, quality: "Standard" }];
        wasAdded = true;
      }
      localStorage.setItem('cart', JSON.stringify(newItems));
      triggerStorageUpdate();
      return newItems;
    });
    if (wasAdded) {
       toast.success(`${product.name} added to cart!`);
    }
  }, []);

  const handleToggleWishlist = useCallback((productId: string, productName: string) => {
    const newWishlist = new Set(wishlist);
    let isWishlisted;
    if (newWishlist.has(productId)) {
      newWishlist.delete(productId);
      isWishlisted = false;
    } else {
      newWishlist.add(productId);
      isWishlisted = true;
    }
    setWishlist(newWishlist);
    localStorage.setItem("wishlist", JSON.stringify(Array.from(newWishlist)));
    triggerStorageUpdate();
    toast.success(isWishlisted ? `${productName} added to wishlist!` : `${productName} removed from wishlist.`);
  }, [wishlist]);

  const handleUpdateCartItem = useCallback((updatedItem: CartItem) => {
    setCartItems((prevItems) => {
        const newItems = prevItems.map((item) => (item.id === updatedItem.id ? updatedItem : item));
        localStorage.setItem('cart', JSON.stringify(newItems));
        triggerStorageUpdate();
        return newItems;
    });
  }, []);
  
  const handleClearCart = useCallback(() => {
    setCartItems([]);
    localStorage.removeItem('cart');
    triggerStorageUpdate();
    setIsCheckoutOpen(false);
  }, []);
  
  const totalAmount = cartItems.reduce((acc, item) => acc + item.price * item.quantity, 0);
  
  // This cannot be reactive to the main `products` state which paginates
  const categories = ["All", "Electronics", "Home", "Accessories", "Apparel", "Books"];

  useEffect(() => {
    if (cartItems.length > 0) {
      const getRecs = async () => {
        setIsLoadingRecommendations(true);
        try {
          const result = await productRecommendation({
            cartItems: cartItems.map(item => ({
              productId: item.id,
              name: item.name,
              quantity: item.quantity,
              category: item.category,
            })),
          });
          setRecommendations(result.recommendations);
        } catch (error) {
          console.error("Failed to get recommendations:", error);
          setRecommendations([]);
        } finally {
          setIsLoadingRecommendations(false);
        }
      };
      const timer = setTimeout(getRecs, 500); // Debounce API call
      return () => clearTimeout(timer);
    } else {
      setRecommendations([]);
    }
  }, [cartItems]);

  const cartCount = cartItems.reduce((acc, item) => acc + item.quantity, 0);

  const cartComponent = (
      <ShoppingCart
        items={cartItems}
        onUpdate={handleUpdateCartItem}
        onRemove={handleClearCart}
        onCheckout={() => {
            setIsCartOpen(false);
            setIsCheckoutOpen(true);
        }}
        isSheet={isMobile}
      />
  );
  
  return (
    <div className="flex min-h-screen w-full flex-col bg-background">
      <Header cartCount={cartCount} onCartClick={() => setIsCartOpen(true)} />
      <div className="container mx-auto flex-1">
        <main className="grid flex-1 gap-8 px-4 py-8 md:grid-cols-1 lg:grid-cols-[1fr_380px] lg:gap-12">
            <div className="flex flex-col gap-8">
               {trendingProducts.length > 0 && (
                 <div className="space-y-6">
                    <div className="flex items-center gap-3">
                        <Flame className="h-8 w-8 text-destructive" />
                        <h2 className="text-3xl font-bold tracking-tight">Trending Now</h2>
                    </div>
                    <Carousel opts={{ align: "start", loop: false }} className="w-full">
                        <CarouselContent>
                        {trendingProducts.map((product) => (
                            <CarouselItem key={product.id} className="md:basis-1/2 lg:basis-1/3">
                                <div className="p-1 h-full">
                                    <ProductCard
                                        product={product}
                                        onAddToCart={handleAddToCart}
                                        wishlist={wishlist}
                                        onToggleWishlist={handleToggleWishlist}
                                    />
                                </div>
                            </CarouselItem>
                        ))}
                        </CarouselContent>
                        <CarouselPrevious className="ml-12" />
                        <CarouselNext className="mr-12" />
                    </Carousel>
                </div>
               )}

                <div>
                    <div className="flex flex-wrap items-center justify-between gap-4">
                        <div>
                            <h1 className="mb-2 text-3xl font-bold tracking-tight sm:text-4xl">Our Products</h1>
                            <p className="text-lg text-muted-foreground">Browse our curated selection of high-quality goods.</p>
                        </div>
                        <Select value={sortOption} onValueChange={(value) => setSortOption(value as SortOption)}>
                            <SelectTrigger className="w-[200px]">
                                <SelectValue placeholder="Sort by..." />
                            </SelectTrigger>
                            <SelectContent>
                                <SelectItem value="name:asc">Name: A-Z</SelectItem>
                                <SelectItem value="price:asc">Price: Low to High</SelectItem>
                                <SelectItem value="price:desc">Price: High to Low</SelectItem>
                                <SelectItem value="views:desc">Most Popular</SelectItem>
                            </SelectContent>
                        </Select>
                    </div>

                    <div className="mt-6 flex flex-wrap gap-2">
                    {categories.map((category) => (
                        <Button
                        key={category}
                        variant={selectedCategory === category ? "default" : "outline"}
                        onClick={() => setSelectedCategory(category)}
                        className="capitalize rounded-full"
                        >
                        {category}
                        </Button>
                    ))}
                    </div>
                </div>

                <ProductList 
                    products={products} 
                    onAddToCart={handleAddToCart}
                    wishlist={wishlist}
                    onToggleWishlist={handleToggleWishlist}
                    isLoading={isLoadingProducts}
                    onLoadMore={handleLoadMore}
                    hasMore={hasMore}
                    isLoadingMore={isLoadingMore}
                />
                
                <AIRecommendations 
                  recommendations={recommendations} 
                  isLoading={isLoadingRecommendations}
                  onAddToCart={handleAddToCart}
                />
            </div>
            {isMobile ? (
                <Sheet open={isCartOpen} onOpenChange={setIsCartOpen}>
                    <SheetContent className="flex flex-col p-0 w-full sm:max-w-md">
                        {cartComponent}
                    </SheetContent>
                </Sheet>
            ) : (
                <aside className="hidden lg:block">
                    {cartComponent}
                </aside>
            )}
        </main>
      </div>
      <CheckoutForm 
        isOpen={isCheckoutOpen}
        onOpenChange={setIsCheckoutOpen}
        totalAmount={totalAmount}
        onCheckout={handleClearCart}
      />
    </div>
  );
}
