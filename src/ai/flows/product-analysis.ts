
// This is an autogenerated file from Firebase Studio.
'use server';
/**
 * @fileOverview This file defines a Genkit flow for analyzing a product image to provide detailed insights.
 *
 * - productAnalysis - An exported function that takes an image data URI and returns a detailed analysis.
 * - ProductAnalysisInput - The input type for the productAnalysis function.
 * - ProductAnalysisOutput - The output type for the productAnalysis function.
 */

import { ai } from '@/ai/genkit';
import { z } from 'genkit';

// Define the input schema for the product analysis flow
const ProductAnalysisInputSchema = z.object({
  imageDataUri: z
    .string()
    .describe(
      "A photo of a product, as a data URI that must include a MIME type and use Base64 encoding. Expected format: 'data:<mimetype>;base64,<encoded_data>'."
    ),
});
export type ProductAnalysisInput = z.infer<typeof ProductAnalysisInputSchema>;

// Define the output schema for the product analysis flow
const ProductAnalysisOutputSchema = z.object({
  productName: z.string().describe('The identified name of the product.'),
  description: z.string().describe('A brief, engaging description of the product.'),
  ecoFriendly: z.object({
    score: z.number().int().min(0).max(100).describe('A score from 0 to 100 indicating how eco-friendly the product is.'),
    reason: z.string().describe('A brief explanation for the eco-friendly score.'),
  }),
  healthAndSafety: z.object({
    hasHarmfulIngredients: z.boolean().describe('Whether the product contains potentially harmful ingredients.'),
    summary: z.string().describe('A summary of the health and safety aspects of the product.'),
  }),
  carbonImpact: z.string().describe('The estimated carbon impact of the product (e.g., Low, Medium, High).'),
  discount: z.string().describe("Today's special discount or offer for this product. Should be a compelling, short offer. If no discount, say 'None available today'."),
  expiryDate: z.string().describe("The estimated expiry date of the product. Format as 'Month DD, YYYY'."),
  alternative: z.object({
    isAvailable: z.boolean().describe('Whether a better alternative is available.'),
    name: z.string().optional().describe('The name of the recommended alternative product.'),
    reason: z.string().optional().describe('The reason why this alternative is better (e.g., more eco-friendly, healthier).'),
  }).describe('A suggested alternative product, if a significantly better one exists.')
});
export type ProductAnalysisOutput = z.infer<typeof ProductAnalysisOutputSchema>;

// Exported function to run the product analysis
export async function productAnalysis(input: ProductAnalysisInput): Promise<ProductAnalysisOutput> {
  return productAnalysisFlow(input);
}

// Define the prompt for the product analysis AI
const productAnalysisPrompt = ai.definePrompt({
  name: 'productAnalysisPrompt',
  input: { schema: ProductAnalysisInputSchema },
  output: { schema: ProductAnalysisOutputSchema },
  prompt: `You are a world-class product analyst. A user has scanned an image of a product. Your task is to analyze it and provide comprehensive, insightful information.

  Product Image: {{media url=imageDataUri}}
  
  Based on the image, perform the following analysis:
  1.  **Identify the Product:** Determine the product's name and write a concise, compelling description.
  2.  **Eco-Friendly Score:** Rate its eco-friendliness on a scale of 0-100. Consider packaging, materials, and lifecycle. Justify your score.
  3.  **Health & Safety:** Analyze for potentially harmful ingredients or materials. Summarize your findings and set 'hasHarmfulIngredients' appropriately.
  4.  **Carbon Impact:** Estimate its carbon footprint as Low, Medium, or High.
  5.  **Discount:** Create a plausible but attractive daily discount (e.g., "15% off today!", "Buy one, get one 50% off").
  6.  **Expiry Date:** Provide a realistic estimated expiry date based on the type of product.
  7.  **Alternative:** If there is a clearly better alternative (e.g., more sustainable, healthier), suggest one by setting isAvailable to true and providing a name and reason. If not, set isAvailable to false.
  
  Return the analysis in the specified JSON format. Be accurate, concise, and helpful.`,
});

// Define the Genkit flow for product analysis
const productAnalysisFlow = ai.defineFlow(
  {
    name: 'productAnalysisFlow',
    inputSchema: ProductAnalysisInputSchema,
    outputSchema: ProductAnalysisOutputSchema,
  },
  async (input) => {
    const { output } = await productAnalysisPrompt(input);
    if (!output) {
      throw new Error("Failed to get a valid analysis from the AI model.");
    }
    return output;
  }
);
