
// This is an autogenerated file from Firebase Studio.
"use client";

import { ScanLine, ShoppingCart, QrCode, User, LogOut } from "lucide-react";
import type { FC } from "react";
import Link from 'next/link';
import { ThemeToggle } from "./theme-toggle";
import { Button } from "./ui/button";
import { getAuth, onAuthStateChanged, signOut, type User as FirebaseUser } from "firebase/auth";
import { firebaseApp } from "@/lib/firebase";
import { useEffect, useState } from "react";
import { useRouter } from "next/navigation";

interface HeaderProps {
  cartCount: number;
}

const Header: FC<HeaderProps> = ({ cartCount }) => {
  const auth = getAuth(firebaseApp);
  const router = useRouter();
  const [user, setUser] = useState<FirebaseUser | null>(null);

  useEffect(() => {
    const unsubscribe = onAuthStateChanged(auth, (user) => {
      setUser(user);
    });
    return () => unsubscribe();
  }, [auth]);

  const handleSignOut = async () => {
    try {
      await signOut(auth);
      router.push("/");
    } catch (error) {
      console.error("Error signing out: ", error);
    }
  };

  const dashboardUrl = user?.email === 'admin@example.com' ? '/admin/dashboard' : '/dashboard';

  return (
    <header className="sticky top-0 z-40 w-full border-b bg-background/95 backdrop-blur-sm">
      <div className="container mx-auto flex h-16 items-center justify-between px-4 md:px-6">
        <Link href="/" className="flex items-center gap-2">
          <ScanLine className="h-8 w-8 text-primary" />
          <h1 className="text-2xl font-bold text-primary">ScanGo</h1>
        </Link>
        <div className="flex items-center gap-2 sm:gap-4">
          <Link href="/scan">
            <Button variant="outline" className="gap-2">
              <QrCode className="h-5 w-5"/>
              <span className="hidden sm:inline">Scan</span>
            </Button>
          </Link>
          <ThemeToggle />
          {user ? (
            <>
              <Link href={dashboardUrl}>
                <Button variant="ghost" size="icon">
                  <User className="h-6 w-6" />
                  <span className="sr-only">Dashboard</span>
                </Button>
              </Link>
              <Button variant="ghost" size="icon" onClick={handleSignOut}>
                <LogOut className="h-6 w-6" />
                <span className="sr-only">Sign Out</span>
              </Button>
            </>
          ) : (
            <Link href="/login">
              <Button variant="ghost">
                <User className="h-5 w-5 sm:mr-2" />
                <span className="hidden sm:inline">Login</span>
              </Button>
            </Link>
          )}
          <div className="relative">
            <ShoppingCart className="h-7 w-7 text-muted-foreground transition-colors hover:text-foreground" />
            {cartCount > 0 && (
              <span className="absolute -right-2 -top-2 flex h-5 w-5 items-center justify-center rounded-full bg-primary text-xs font-bold text-primary-foreground">
                {cartCount}
              </span>
            )}
          </div>
        </div>
      </div>
    </header>
  );
};

export default Header;
